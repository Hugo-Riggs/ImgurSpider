package imgurParse;




import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferInt;
import java.awt.image.DirectColorModel;
import java.awt.image.PixelGrabber;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Scanner;

import javax.imageio.ImageIO;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;


/////////////////////////////
//// Parse a imgur page for its images
////
////

//	http://jsoup.org/cookbook/
//	http://jsoup.org/apidocs/

public class imgurParse {
	
	private static final int[] RGB_MASKS = {0xFF0000, 0xFF00, 0xFF};
	 private static final ColorModel RGB_OPAQUE =
	     new DirectColorModel(32, RGB_MASKS[0], RGB_MASKS[1], RGB_MASKS[2]);
	 
	public static ImageUtilities imageUtil = new ImageUtilities();
	   // Return the ith word of a String.
	   public static String ithWord(String s, int i) {
		   try {
			   String tmp = s;
			   String ithword = "";
			   for (int j = 0; j < i; j++) {
			         if (tmp.indexOf(" ") == -1)
			            ithword = tmp.substring(0, tmp.length());
			         else {
			            ithword = tmp.substring(0, tmp.indexOf(" "));
			            tmp = tmp.substring(tmp.indexOf(" ")+1, tmp.length());
			         }
			      }
			   return ithword;
		   }
		   catch (Exception e) {
			   System.out.println("Invalid string: "+s);
			   return "";
		   }
	   }
	   
	   
	   public static byte[] returnBytes(BufferedImage image){
		   byte[] imageInByte = null;
		   try{
		 
			BufferedImage originalImage = image;

		 
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			ImageIO.write( originalImage, "jpg", baos );
			baos.flush();
			imageInByte = baos.toByteArray();
			baos.close();
		 
			}catch(IOException e){
				System.out.println(e.getMessage());
			}		
		   
		   return imageInByte;
		   }	
	   
	   
	   
	   public static String addSlashes(String str){
		   
		   for(int itr=0;itr<str.length();itr++){
			   if(str.charAt(itr)=='\''){str = str.substring(0, itr) + "\\" + str.substring(itr, str.length()); itr++;}
			   if(str.charAt(itr)=='/'){str = str.substring(0, itr) + "/" + str.substring(itr, str.length()); itr++;}
		   }
		   
		   return str;
	   }
	   
	
	@SuppressWarnings("resource")
	public static void main(String args[]) throws IOException, InterruptedException, sun.awt.image.ImageFormatException{
		
		scrapeFunctions sf= new scrapeFunctions();
		int imgSv=0;
		 int strtpg=0;
		 int pageLimit=50;
		 boolean prints=false;
		 boolean quickMode = false;
		 boolean gifs=false;
		 String saveTo="";
		 
		for(int i=0;i<args.length-1;i++){
			switch(args[i]){
				case "-qm":
					quickMode=true;
					break;
				case "-v":
					prints=true;
					break;
				case "-gifs":
					gifs=true;
					break;
			}
		}
		String article="";
		if(args.length!=0){article = args[args.length-1];}
		
		//System.loadLibrary("jsoup-1.8.2.jar");
		/*
				Scanner scan = new Scanner(System.in);
				System.out.println("Run setup ? (y or n)");
				 String response = scan.nextLine();
				 while(!response.equalsIgnoreCase("y")&&!response.equalsIgnoreCase("n")){System.out.println("Run setup ? (y or n)");response = scan.nextLine();}
				 String saveTo="";
				 int imgSv=0;
				 int strtpg=0;
				 int pageLimit=50;
				 boolean prints=true;
				 boolean quickMode = false;
				 if(response.equalsIgnoreCase("y")){
					 System.out.println("Enter directory to save images to (leave blank for current directory)");
					 saveTo=scan.nextLine();
					 saveTo=addSlashes(saveTo);
					 if(saveTo.length()==0){saveTo = imgurParse.class.getClassLoader().getResource(".").getPath();}
					 imgSv=1;
					 response="";
					 while(response==""){System.out.println("disable printing y or n");
					 response = scan.nextLine();
					 if(response.equalsIgnoreCase("y")){
						 prints=false;
					 }else{}
					 }
					 
					System.out.println("start page (0 is default)");
					strtpg=scan.nextInt();
					System.out.println("use quick mode (only save jpg) y or n");
					response = scan.next();
					 if(response.equalsIgnoreCase("y")){
						 quickMode=true;
					 }else{}
					 pageLimit=-1;
					 while(true){
					 System.out.println("set page limit (1 page ~ 60 images) 0 for endless scrape");
						pageLimit = scan.nextInt();
						if (pageLimit!=-1){
							break;
						}
						}
					 
				 }else{
				 }
				 
				String article = "";
				
				while(article==""){
					System.out.print("enter imgur directory title ");
					article=scan.next();	
				}
				*/
				if(article.contains("http")){}else if (!article.contains("http")){article="http://"+article;}
				// Collect HTML
				Document doc = null;
				while(true){
					System.out.print("\nconnecting to " + article  + " . . .  ");
					doc = Jsoup.connect(article).get();
					System.out.print("***link established***\n");
					if(doc.hasText()){break;}
					Thread.sleep(5000);
				}
				//	print Title
				String title = doc.title();
				if(prints)System.out.println(title);
				String dirName = ithWord(title, 1);
				
				// Create objects which hold image URLS
				Element content = doc.getElementById("content");
				Elements links = content.getElementsByTag("a");
				
				// Grab HTML DIV tag which holds image URL
				String htmlChunk="";
				htmlChunk = doc.getElementsByClass("options").toString();
				htmlChunk = htmlChunk.substring(htmlChunk.indexOf("item nodisplay"), htmlChunk.length());
				htmlChunk = htmlChunk.substring(htmlChunk.indexOf("href=")+6,htmlChunk.length());
				htmlChunk = htmlChunk.substring(0,htmlChunk.indexOf('"'));
				
				int counter=strtpg;
				int linksFound=0;
				Document tempdoc = Jsoup.connect("https://imgur.com"+htmlChunk+"/page/"+counter+"/hit?scrolled").get();
				doc = Jsoup.connect("https://imgur.com"+htmlChunk+"/page/"+counter+"/hit?scrolled").get();
				
				
				content = doc.body();
				 
				links = content.getElementsByTag("a");
				String linkHref = "";
				
				ArrayList<String> names = new ArrayList<String>();
				
				int repeatCntr=0;
				while(true){
					if(counter!=0){
						while(doc==tempdoc){
							try{
						doc = Jsoup.connect("https://imgur.com"+htmlChunk+"/page/"+counter+"/hit?scrolled").get();
						Thread.sleep(5000);
							} catch(java.net.SocketTimeoutException e){System.out.println(e);} catch(org.jsoup.HttpStatusException me){System.out.println(me);}
						content = doc.body();
						links = content.getElementsByTag("a");
						counter++;
						repeatCntr++;
						if(repeatCntr>5){break;}
						}
					}else{counter++;}
					for (Element link : links) {
						 linkHref = link.attr("href");
						 if(!names.contains(linkHref)&&!linkHref.contains("javascript")&&doc!=tempdoc){
							 names.add(linkHref);
							 String imgName = linkHref.substring(linkHref.indexOf("m/")+2, linkHref.length());
						      if(prints)System.out.println("Image name " + imgName);if(imgName==""){break;}
						      imgName = imgName.substring(imgName.indexOf('/')+1, imgName.length() );
						      imgName = imgName.substring(imgName.indexOf('/')+1, imgName.length());
						      
							 Element body = null;
							 Elements images=null;
							 
							 if(!quickMode){
								 doc = Jsoup.connect("https://imgur.com"+linkHref).get();
								 System.out.println("https://imgur.com"+linkHref);
								 String id=linkHref.substring(3);
								 id=id.substring(id.indexOf("/")+1);
								 body = doc.getElementById(id);
								 if(!gifs){
									 images = body.getElementsByTag("img");
								 }else{
									 images=body.getElementsByAttribute("video/webm");
								 }
							 }else{
								 body = doc.getElementById(imgName);
								 images = body.getElementsByTag("img");
							 }
							 int fork = 0;//This case covers when the image is a .GIF
							 if(images.toString().length()==0){
								 fork=1;
								 images = body.getElementsByTag("script");
							 }
							 
							 String dlLink = images.toString();
							 if(dlLink.toString().length()==0){break;}
							 if(fork==0){
								 if(prints)System.out.println();
								 if(prints)System.out.println("step 1 " + dlLink);
								 if(prints)System.out.println();
								 
								 dlLink = dlLink.substring(dlLink.indexOf('"')+3,
										 dlLink.length());
								 
								 if(prints)System.out.println();
								 if(prints)System.out.println("step 2 " +dlLink);
								 if(prints)System.out.println();
								 if(!quickMode){dlLink = "https://"+dlLink.substring(2, dlLink.indexOf('"'));}
								 else {dlLink = "https://"+dlLink.substring(dlLink.indexOf('"')+3, dlLink.lastIndexOf('"'));
								 dlLink = dlLink.substring(0, dlLink.indexOf("b."))+dlLink.substring(dlLink.indexOf("b.")+1, dlLink.length());}
								 
							 }else if(fork==1){
							
								 if(prints)System.out.println();
								 if(prints)System.out.println("step 1 " + dlLink);
								 if(prints)System.out.println();
								 
								 dlLink = dlLink.substring(dlLink.indexOf("//")+2,dlLink.length());
								 
								 if(prints)System.out.println();
								 if(prints)System.out.println("step 2 " +dlLink);
								 if(prints)System.out.println();
								 
								 dlLink = "https://"+dlLink.substring(2, dlLink.indexOf("',"));	 
								 
							 }
							 
							 // Create the image object
							 Image image;
							 //Image image = null;
								try{
									if(dlLink.contains("?1")){dlLink=dlLink.substring(0,dlLink.indexOf("?1"));}
									
									 String ext="";
									 if(!quickMode){
									 ext = dlLink.substring(dlLink.indexOf(".")+1, dlLink.length());
									 ext = ext.substring(ext.indexOf(".")+1, ext.length());
									 }else{
										 ext = dlLink.substring(dlLink.indexOf(".")+1, dlLink.length());
										 ext = ext.substring(ext.indexOf(".")+1, ext.length());
										 ext = ext.substring(ext.indexOf(imgName)+imgName.length()+1, ext.length());
									 }
									
									 if(prints)System.out.println();
									 if(prints)System.out.println("step 3 " +dlLink);
									 if(prints)System.out.println();
									if(gifs){
										 byte[] b = new byte[1];
										    URL url = new URL(dlLink);
										    URLConnection urlConnection = url.openConnection();
										    urlConnection.connect();
										    DataInputStream di = new DataInputStream(urlConnection.getInputStream());
										    FileOutputStream fo = new FileOutputStream(imgName+".gif");
										    while (-1 != di.read(b, 0, 1))
										      fo.write(b, 0, 1);
										    di.close();
										    fo.close();
									}else{
								       URL url = new URL(dlLink);
								      
								       image = java.awt.Toolkit.getDefaultToolkit().createImage(url);
	
								       PixelGrabber pg = new PixelGrabber(image, 0, 0, -1, -1, true);
								       pg.grabPixels();
								       int width = pg.getWidth(), height = pg.getHeight();
								       if(width<0||height<0){System.out.println("breaking because image width or height was invalid.");break;}
								       DataBuffer buffer = new DataBufferInt((int[]) pg.getPixels(), pg.getWidth() * pg.getHeight());
								       WritableRaster raster = Raster.createPackedRaster(buffer, width, height, width, RGB_MASKS, null);
								       BufferedImage bi = new BufferedImage(RGB_OPAQUE, raster, false, null);
								       
								      String path="";    
								      if(imgSv==0){
								    	  path = imgurParse.class.getClassLoader().getResource(".").getPath();
								      		}else if(imgSv==1){ path = saveTo; }
								      
								      if(prints)System.out.println("Image name " + imgName);
								      
								      // If this is the first image create the path for the images
								      if(linksFound==0){ new File(path+"//"+dirName+"//").mkdirs(); }
								      
								    // if(prints)System.out.println();
									// if(prints)System.out.println("step 4 ext:" +ext);
									// if(prints)System.out.println();
						
									ImageIO.write(bi, ext, new File((path+"//"+dirName+"//")+imgName+"."+ext));
									}
								      linksFound++;
								      if(prints)System.out.println("page " + counter + " pictures downloaded " + linksFound);
							  } catch (IOException e) {
								  if(prints)System.out.println(e);
							  }
						
						 }
						 	 
					}
					tempdoc=doc;
					if(counter>pageLimit&&pageLimit!=0){ System.out.println("Stopped because counter > " + pageLimit); break;}
				//	if(repeatCntr>5){ System.out.println("Stopped because repeatCntr > 5 "); break;}
				}
				
				System.out.println("repeatCntr" + repeatCntr);
				System.out.println("counter " + counter + " : page we ended on");
				System.out.println("linksFound " + linksFound);
				
				System.exit(0);
					
				counter=0;
				doc = Jsoup.connect("https://imgur.com/"+article+"#top-tag-container").get();
				Element body = doc.body();
	
	}
}
